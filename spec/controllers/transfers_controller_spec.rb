require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransfersController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
    @folder = Folder.create!(name: "Test folder", path: "/folder/example", description: "Folder example")
    @agreement = @folder.agreements.create!(name: "Test agreement")
  end

  # This should return the minimal set of attributes required to create a valid
  # Transfer. As you add validations to Transfer, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      user: @user,
      description: 'Description example',
      username: 'example_username',
      email: 'test@example.com',
      first_name: 'Mister',
      last_name: 'Example'
    }
  end

  # used in testing "POST create" tests 
  def create_valid_attributes
    {
      user_id: @user.id, 
      description: 'Description example',
      username: 'example_username', 
      email: 'test@example.com',
      first_name: 'Test',
      last_name: 'Example'
    }
  end

  def invalid_params 
    {
      description: 'Description example',
      username: 'example_username', 
      email: 'test@example.com',
      first_name: 'Test',
      last_name: 'Example'
    }
  end

  describe "GET index" do
    it "assigns all transfers as @transfers" do
      transfer = @agreement.transfers.create! valid_attributes
      get :index, :agreement => @agreement, :agreement_id => @agreement.id
      assigns(:transfers).should eq([transfer])
    end
  end

  describe "GET show" do
    it "assigns the requested transfer as @transfer" do
      transfer = @agreement.transfers.create! valid_attributes
      get :show, :agreement => @agreement, :agreement_id => @agreement.id, :id => transfer.id
      assigns(:transfer).should eq(transfer)
    end
  end

  describe "GET new" do
    it "assigns a new transfer as @transfer" do
      get :new, :user => @user_id, :agreement => @agreement, :agreement_id => @agreement.id
      assigns(:transfer).should be_a_new(Transfer)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Transfer" do
        expect{ post :create, :agreement_id => @agreement.id, :transfer => create_valid_attributes }.to change(Transfer, :count).by(1)
      end

      it "assigns a newly created transfer as @transfer" do
        post :create, :agreement_id => @agreement.id, :transfer => create_valid_attributes
        assigns(:transfer).should be_a(Transfer)
        assigns(:transfer).should be_persisted
      end

      it "redirects to the created transfer" do
        post :create, :agreement_id => @agreement.id, :transfer => create_valid_attributes
        response.should redirect_to agreement_transfer_path(agreement_id: @agreement.id, id: Transfer.last.id)
      end
    end

    context "with invalid params" do

      before do 
        Transfer.any_instance.stub(:save).and_return(false)
        post :create, :agreement => @agreement, :agreement_id => @agreement.id, :transfer => invalid_params
      end

      it "assigns a newly created but unsaved transfer as @transfer" do
        # Trigger the behavior that occurs when invalid params are submitted
        assigns(:transfer).should be_a_new(Transfer)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        # Transfer.any_instance.stub(:save).and_return(false)
        response.should render_template("new")
      end
    end
  end
end
